name: SonarCloud Fullstack Analyse

on:
  push:
    branches: [ main, dev-frontend ]
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ main ]

jobs:
  sonarcloud:
    name: Analyse mit SonarCloud
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Repository auschecken
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) Java (fÃ¼r SonarScanner)
      - name: JDK 11 installieren
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      # 3) .NET (Backend)
      - name: .NET SDK installieren
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 4) Node.js (Frontend)
      - name: Node.js installieren und Cache einrichten
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 5) SonarScanner for .NET installieren
      - name: dotnet-sonarscanner installieren
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.12.0
          echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      # 6) SonarCloud Begin Analyse (im Root-Ordner)
      - name: SonarCloud Begin
        run: |
          dotnet sonarscanner begin \
            /k:"efficient-and-fun_fullstack" \
            /o:"efficient-and-fun" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.sources="backend,frontend/src" \
            /d:sonar.exclusions="**/node_modules/**,**/bin/**,**/obj/**,**/*.json" \
            /d:sonar.test.inclusions="**/*.spec.ts,**/*.test.ts" \
            /d:sonar.sourceEncoding="UTF-8"


      # 7) Build & Tests Backend
      - name: Backend bauen & testen
        working-directory: backend
        run: |
          dotnet restore WebApi.sln
          dotnet build WebApi.sln -c Release
          # optional: dotnet test WebApi.sln --logger trx

      # 8) Build & Tests Frontend
      - name: Frontend installieren & bauen
        working-directory: frontend
        run: |
          npm ci
          npm run build
          # optional: npm test

      # 9) SonarCloud End Analyse
      - name: SonarCloud End
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # 10) Badge (in README) bleibt automatisch aktuell

